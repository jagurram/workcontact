version: '3'
services:

  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: digitalocean.com/php
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./sql-scripts/sql-pays.sql:/tmp/sql-pays.sql
    networks:
      - app-network
    depends_on:
      - db

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      # I'm using port 8888 to access docker to avoid conflict with port 80 
      # in my local environment
      - "8888:80"  
      - "443:443"
    volumes:
      - ./:/var/www
      - ./nginx/conf.d:/etc/nginx/conf.d/default.conf
      - ./sql-scripts/sql-pays.sql:/tmp/sql-pays.sql
    networks:
      - app-network
    depends_on:
      - db

  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      # The same principle goes for mysql by using port 3307 instead of 
      # default port 3306
      - "3307:3306"
    environment:
      MYSQL_DATABASE: laravel
      # replace with your own mysql password here
      MYSQL_ROOT_PASSWORD: YOUR_MYSQL_PASSWORD
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network


  jenkins:
    image: jenkins/jenkins
    container_name: jenkins
    restart: unless-stopped
    tty: true
    ports:
      # I'm using port 8888 to access docker to avoid conflict with port 80 
      # in my local environment
      - "8080:8080"  
      - "444:443"
    volumes:
      - ./jenkins_data:/jenkins_data
    networks:
      - app-network

  registry:
    image: registry:2
    container_name: registry
    ports:
    - "5000:5000"
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data
    volumes:
      - ./data_docker_registry:/data
    networks:
      - app-network

  
#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  dbdata:
    driver: local